/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package index;

import java.text.DecimalFormat;
import java.util.Arrays;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.JFreeChart;
import org.jfree.data.general.DefaultPieDataset;
import org.jfree.data.general.PieDataset;
/**
 *
 * @author barbaromatrix
 */
public class Index extends javax.swing.JFrame {
    
    private static final long serialVersionUID = 1L;
    Grafico g;
    /**
     * Creates new form Index
     */
    public Index() {
        initComponents();  
        
        String[] elementos = {"[150;154[","[154;158[","[158;162[","[162;166[","[166;170[","[170;174["};
        String[] frequencia = {"4", "9", "11", "8", "5", "3"};
        
        String cenoura[] = {"0", "1", "2", "3", "4", "5", "6", "7"};
        String frequencias[] = {"45", "52", "48", "55", "30", "10", "8", "2"};
        
        for(int i = 0; i < elementos.length; i++)
        {
            ((DefaultTableModel)jTable1.getModel()).addRow(new Object[]{elementos[i],frequencia[i]});
        }
            
        for (int i = 0; i < cenoura.length; i++) {
            ((DefaultTableModel)jTable2.getModel()).addRow(new Object[]{cenoura[i],frequencias[i]});
        }
        
        pnlComplex.setVisible(false);
        pnlSimple.setVisible(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnGrupoTipo = new javax.swing.ButtonGroup();
        jLabel1 = new javax.swing.JLabel();
        rdbComIntervalo = new javax.swing.JRadioButton();
        rdbSemIntervalo = new javax.swing.JRadioButton();
        pnlPai = new javax.swing.JPanel();
        pnlComplex = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        txtLimiteInferior = new javax.swing.JTextField();
        txtLimiteSuperior = new javax.swing.JTextField();
        txtFrequenciaComplex = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        btnAdicionar = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jButton1 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        txpInformacoesGeradas = new javax.swing.JTextPane();
        jLabel9 = new javax.swing.JLabel();
        btnLimpaComplex = new javax.swing.JButton();
        pnlSimple = new javax.swing.JPanel();
        jLabel7 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        txtValorSimple = new javax.swing.JTextField();
        txtFrequenciaSimple = new javax.swing.JTextField();
        btnAdicionarSimple = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTable2 = new javax.swing.JTable();
        jLabel8 = new javax.swing.JLabel();
        btnCalcularSimple = new javax.swing.JButton();
        jLabel10 = new javax.swing.JLabel();
        jScrollPane4 = new javax.swing.JScrollPane();
        txpInformacoesGeradasSimple = new javax.swing.JTextPane();
        btnLimparSimple = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JSeparator();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Projeto Estatística");
        setResizable(false);

        jLabel1.setFont(new java.awt.Font("Comic Sans MS", 0, 18)); // NOI18N
        jLabel1.setText("Seja bem-vindo ao projeto de Estatística");
        jLabel1.setName("lblApresentacao"); // NOI18N

        btnGrupoTipo.add(rdbComIntervalo);
        rdbComIntervalo.setSelected(true);
        rdbComIntervalo.setText("Com intervalo");
        rdbComIntervalo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rdbComIntervaloActionPerformed(evt);
            }
        });

        btnGrupoTipo.add(rdbSemIntervalo);
        rdbSemIntervalo.setText("Sem intervalo");
        rdbSemIntervalo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rdbSemIntervaloActionPerformed(evt);
            }
        });

        pnlPai.setLayout(new java.awt.CardLayout());

        jLabel2.setText("Limite Inferior");

        jLabel3.setText("Limite Superior");

        txtLimiteInferior.setNextFocusableComponent(txtLimiteSuperior);

        txtLimiteSuperior.setNextFocusableComponent(txtFrequenciaComplex);

        jLabel4.setText("Frequência");

        btnAdicionar.setText("Adicionar");
        btnAdicionar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAdicionarActionPerformed(evt);
            }
        });

        jLabel5.setText("Itens Adicionados");

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Valor", "Frequencia"
            }
        ));
        jTable1.setEnabled(false);
        jScrollPane2.setViewportView(jTable1);

        jButton1.setText("Calcular valores");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        txpInformacoesGeradas.setEditable(false);
        jScrollPane1.setViewportView(txpInformacoesGeradas);

        jLabel9.setText("Informações geradas");

        btnLimpaComplex.setText("Limpar");
        btnLimpaComplex.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLimpaComplexActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnlComplexLayout = new javax.swing.GroupLayout(pnlComplex);
        pnlComplex.setLayout(pnlComplexLayout);
        pnlComplexLayout.setHorizontalGroup(
            pnlComplexLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlComplexLayout.createSequentialGroup()
                .addGap(58, 58, 58)
                .addGroup(pnlComplexLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlComplexLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(jLabel4)
                        .addComponent(txtLimiteInferior)
                        .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(txtFrequenciaComplex)
                        .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(txtLimiteSuperior))
                    .addComponent(btnAdicionar, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 70, Short.MAX_VALUE)
                .addGroup(pnlComplexLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlComplexLayout.createSequentialGroup()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 298, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(22, 22, 22))
                    .addGroup(pnlComplexLayout.createSequentialGroup()
                        .addComponent(jButton1)
                        .addGap(56, 56, 56)
                        .addComponent(btnLimpaComplex, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlComplexLayout.createSequentialGroup()
                        .addComponent(jLabel5)
                        .addGap(114, 114, 114))))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlComplexLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel9)
                .addGap(202, 202, 202))
            .addGroup(pnlComplexLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1)
                .addContainerGap())
        );
        pnlComplexLayout.setVerticalGroup(
            pnlComplexLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlComplexLayout.createSequentialGroup()
                .addGroup(pnlComplexLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlComplexLayout.createSequentialGroup()
                        .addComponent(jLabel5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 178, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(pnlComplexLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jButton1)
                            .addComponent(btnLimpaComplex)))
                    .addGroup(pnlComplexLayout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtLimiteInferior, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtLimiteSuperior, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtFrequenciaComplex, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnAdicionar)))
                .addGap(18, 18, 18)
                .addComponent(jLabel9)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 76, Short.MAX_VALUE)
                .addContainerGap())
        );

        pnlPai.add(pnlComplex, "card2");

        pnlSimple.setPreferredSize(new java.awt.Dimension(552, 321));

        jLabel7.setText("Valor");

        jLabel6.setText("Frequência");

        txtValorSimple.setNextFocusableComponent(txtFrequenciaSimple);

        txtFrequenciaSimple.setNextFocusableComponent(btnAdicionarSimple);

        btnAdicionarSimple.setText("Adicionar");
        btnAdicionarSimple.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAdicionarSimpleActionPerformed(evt);
            }
        });

        jTable2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Valor", "Frequencia"
            }
        ));
        jScrollPane3.setViewportView(jTable2);

        jLabel8.setText("Itens Adicionados");

        btnCalcularSimple.setText("Calcular valores");
        btnCalcularSimple.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCalcularSimpleActionPerformed(evt);
            }
        });

        jLabel10.setText("Informações Geradas");

        txpInformacoesGeradasSimple.setEditable(false);
        jScrollPane4.setViewportView(txpInformacoesGeradasSimple);

        btnLimparSimple.setText("Limpar");
        btnLimparSimple.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLimparSimpleActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnlSimpleLayout = new javax.swing.GroupLayout(pnlSimple);
        pnlSimple.setLayout(pnlSimpleLayout);
        pnlSimpleLayout.setHorizontalGroup(
            pnlSimpleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlSimpleLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane4)
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlSimpleLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel10)
                .addGap(193, 193, 193))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlSimpleLayout.createSequentialGroup()
                .addGap(59, 59, 59)
                .addGroup(pnlSimpleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlSimpleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(btnAdicionarSimple, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(txtFrequenciaSimple)
                        .addComponent(txtValorSimple, javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(jLabel6, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 90, Short.MAX_VALUE))
                    .addComponent(jLabel7))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 84, Short.MAX_VALUE)
                .addGroup(pnlSimpleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(pnlSimpleLayout.createSequentialGroup()
                        .addComponent(btnCalcularSimple)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnLimparSimple))
                    .addGroup(pnlSimpleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 298, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlSimpleLayout.createSequentialGroup()
                            .addComponent(jLabel8)
                            .addGap(89, 89, 89))))
                .addGap(21, 21, 21))
        );
        pnlSimpleLayout.setVerticalGroup(
            pnlSimpleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlSimpleLayout.createSequentialGroup()
                .addGroup(pnlSimpleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(pnlSimpleLayout.createSequentialGroup()
                        .addComponent(jLabel8)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                    .addGroup(pnlSimpleLayout.createSequentialGroup()
                        .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 18, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtValorSimple, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel6)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtFrequenciaSimple, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(24, 24, 24)
                        .addComponent(btnAdicionarSimple)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlSimpleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnCalcularSimple)
                    .addComponent(btnLimparSimple))
                .addGap(24, 24, 24)
                .addComponent(jLabel10)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 76, Short.MAX_VALUE)
                .addGap(32, 32, 32))
        );

        pnlPai.add(pnlSimple, "card3");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(pnlPai, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addGap(101, 101, 101)
                .addComponent(jLabel1)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(116, 116, 116)
                .addComponent(rdbComIntervalo)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(rdbSemIntervalo)
                .addGap(148, 148, 148))
            .addComponent(jSeparator1)
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {rdbComIntervalo, rdbSemIntervalo});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(23, 23, 23)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(rdbSemIntervalo)
                    .addComponent(rdbComIntervalo))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pnlPai, javax.swing.GroupLayout.PREFERRED_SIZE, 368, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {rdbComIntervalo, rdbSemIntervalo});

        setSize(new java.awt.Dimension(562, 514));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void rdbComIntervaloActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rdbComIntervaloActionPerformed
        pnlComplex.setVisible(true);
        pnlSimple.setVisible(false);
    }//GEN-LAST:event_rdbComIntervaloActionPerformed

    private void rdbSemIntervaloActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rdbSemIntervaloActionPerformed
        pnlComplex.setVisible(false);
        pnlSimple.setVisible(true);
    }//GEN-LAST:event_rdbSemIntervaloActionPerformed

    private void btnAdicionarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAdicionarActionPerformed
        if(txtLimiteInferior.getText().isEmpty()){
            txtLimiteInferior.requestFocus();
        }else if(txtLimiteSuperior.getText().isEmpty()){
            txtLimiteSuperior.requestFocus();
        }else if(txtFrequenciaComplex.getText().isEmpty()){
            txtFrequenciaComplex.requestFocus();
        }else{
            if(Double.parseDouble(txtLimiteInferior.getText()) > Double.parseDouble(txtLimiteSuperior.getText())){
                JOptionPane.showMessageDialog(null, "Por favor. O limite inferior não pode ser maior que o limite superior.");
                txtLimiteInferior.setText("");
                txtLimiteSuperior.setText("");
                txtLimiteInferior.requestFocus();
            }else if(Double.parseDouble(txtFrequenciaComplex.getText()) <= 0){
                JOptionPane.showMessageDialog(null, "A frequencia deve ser maior que zero.");
                txtFrequenciaComplex.setText("");
                txtFrequenciaComplex.requestFocus();
            }else{
                ((DefaultTableModel)jTable1.getModel()).addRow(new Object[]{"[" + txtLimiteInferior.getText() + ";" + txtLimiteSuperior.getText() + "[", txtFrequenciaComplex.getText()});
                txtFrequenciaComplex.setText("");
                txtLimiteInferior.setText("");
                txtLimiteSuperior.setText("");
                txtLimiteInferior.requestFocus();
            }
        }
    }//GEN-LAST:event_btnAdicionarActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        if( jTable1.getRowCount() > 0 )
        {
            String tabela[][] = new String[jTable1.getRowCount()][2];
            DecimalFormat df = new DecimalFormat("0.00");
            String[] elementos = new String[jTable1.getRowCount()];
            double[] frequencia = new double[jTable1.getRowCount()];

            for(int i = 0; i < jTable1.getRowCount(); i++){
                elementos[i] = String.valueOf(((DefaultTableModel)jTable1.getModel()).getValueAt(i, 0));
                frequencia[i] = Double.parseDouble(String.valueOf(((DefaultTableModel)jTable1.getModel()).getValueAt(i, 1)));

                tabela[i][0] = String.valueOf(((DefaultTableModel)jTable1.getModel()).getValueAt(i, 0));
                tabela[i][1] = String.valueOf( frequencia[i] );

            }       

            String informacoes = "Média - " + df.format(media( retornaArrayDoubleArrumado( elementos ), frequencia ) ) + "\n";
            informacoes += "Moda - " + df.format( moda( retornaArrayDoubleArrumado( elementos ), frequencia ) ) + "\n";
            informacoes += "Mediana - " + df.format(mediana(frequencia)) + "\n";

            informacoes += "Quartil 1 - " + df.format( quartil( retornaArrayDoubleArrumado(elementos), frequencia, 1 ) ) + "\n";
            informacoes += "Quartil 2 - " + df.format( quartil( retornaArrayDoubleArrumado(elementos), frequencia, 2 ) ) + "\n";
            informacoes += "Quartil 3 - " + df.format( quartil( retornaArrayDoubleArrumado(elementos), frequencia, 3 ) ) + "\n";
            informacoes += "Quartil 4 - " + df.format( quartil( retornaArrayDoubleArrumado(elementos), frequencia, 4 ) ) + "\n";
            
            informacoes += "Decil 1 - " + df.format( decil( retornaArrayDoubleArrumado(elementos), frequencia, 1 ) ) + "\n";
            informacoes += "Decil 2 - " + df.format( decil( retornaArrayDoubleArrumado(elementos), frequencia, 2 ) ) + "\n";
            informacoes += "Decil 3 - " + df.format( decil( retornaArrayDoubleArrumado(elementos), frequencia, 3 ) ) + "\n";
            informacoes += "Decil 4 - " + df.format( decil( retornaArrayDoubleArrumado(elementos), frequencia, 4 ) ) + "\n";
            informacoes += "Decil 5 - " + df.format( decil( retornaArrayDoubleArrumado(elementos), frequencia, 5 ) ) + "\n";
            informacoes += "Decil 6 - " + df.format( decil( retornaArrayDoubleArrumado(elementos), frequencia, 6 ) ) + "\n";
            informacoes += "Decil 7 - " + df.format( decil( retornaArrayDoubleArrumado(elementos), frequencia, 7 ) ) + "\n";
            informacoes += "Decil 8 - " + df.format( decil( retornaArrayDoubleArrumado(elementos), frequencia, 8 ) ) + "\n";
            informacoes += "Decil 9 - " + df.format( decil( retornaArrayDoubleArrumado(elementos), frequencia, 9 ) ) + "\n";
            informacoes += "Decil 10 - " + df.format( decil(retornaArrayDoubleArrumado(elementos), frequencia, 10 ) ) + "\n";

            informacoes += "DM - " + df.format(desvioMedio(retornaArrayDoubleArrumado(elementos), frequencia)) + "\n";
            informacoes += "DP - " + df.format(desvioPadrao(retornaArrayDoubleArrumado(elementos), frequencia)) + "\n";
            informacoes += "CV - " + df.format(coeficienteVariacao(desvioPadrao(retornaArrayDoubleArrumado(elementos), frequencia), media(retornaArrayDoubleArrumado(elementos), frequencia))) + "\n";


            txpInformacoesGeradas.setText(informacoes);

            g = new Grafico();

            PieDataset dataset = createDataset(tabela, frequencia, soma(frequencia, frequencia.length - 1));

            JFreeChart chart = createChart(dataset, "Gráfico de setores");
            
            ChartPanel chartPanel = new ChartPanel(chart);

            // default tamanho
            chartPanel.setPreferredSize(new java.awt.Dimension(500, 270));

            // adiciona a nossa aplicação
            g.setContentPane(chartPanel);

            g.setVisible(true);
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void btnAdicionarSimpleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAdicionarSimpleActionPerformed
        if(txtValorSimple.getText().isEmpty()){
            txtValorSimple.requestFocus();
        }
        else if (txtFrequenciaSimple.getText().isEmpty()){
            txtFrequenciaSimple.requestFocus();
        }else{
            if(Double.parseDouble(txtFrequenciaSimple.getText()) <= 0){
                JOptionPane.showMessageDialog(null, "A frequencia deve ser maior que zero.");
                txtFrequenciaSimple.setText("");
                txtFrequenciaSimple.requestFocus();
            }else{
                ((DefaultTableModel)jTable2.getModel()).addRow(new Object[]{txtValorSimple.getText(), txtFrequenciaSimple.getText()});
                txtFrequenciaSimple.setText("");
                txtValorSimple.setText("");
                txtValorSimple.requestFocus();
            }
        }
    }//GEN-LAST:event_btnAdicionarSimpleActionPerformed

    private void btnCalcularSimpleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCalcularSimpleActionPerformed
        if (jTable2.getRowCount() > 0)
        {
            DecimalFormat df = new DecimalFormat("0.00");
            String tabela[][] = new String[jTable2.getRowCount()][2];

            String[] elementos = new String[jTable2.getRowCount()];
            double[] frequencia = new double[jTable2.getRowCount()];
            for(int i = 0; i < jTable2.getRowCount(); i++){
                elementos[i] = String.valueOf(((DefaultTableModel)jTable2.getModel()).getValueAt(i, 0));
                frequencia[i] = Double.parseDouble(String.valueOf(((DefaultTableModel)jTable2.getModel()).getValueAt(i, 1)));
                tabela[i][0] = String.valueOf(((DefaultTableModel)jTable2.getModel()).getValueAt(i, 0));
                tabela[i][1] = String.valueOf( frequencia[i] );
            }

            String informacao = "Média - " + df.format(media(retornaVetorDoubleArrumado(elementos), frequencia)) + "\n";
            informacao += "Moda - " + df.format(moda(retornaVetorDoubleArrumado(elementos), frequencia)) + "\n";
            informacao += "Mediana - " + df.format(mediana(retornaVetorDoubleArrumado(elementos))) + "\n";

            txpInformacoesGeradasSimple.setText(informacao);

            g = new Grafico();

            PieDataset dataset = createDataset(tabela, frequencia, soma(frequencia, frequencia.length - 1));

            JFreeChart chart = createChart(dataset, "Gráfico de setores");

            ChartPanel chartPanel = new ChartPanel(chart);

            // default tamanho
            chartPanel.setPreferredSize(new java.awt.Dimension(500, 270));

            // adiciona a nossa aplicação
            g.setContentPane(chartPanel);

            g.setVisible(true);
        }
    }//GEN-LAST:event_btnCalcularSimpleActionPerformed

    private void btnLimpaComplexActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLimpaComplexActionPerformed
        txpInformacoesGeradas.setText("");
        ((DefaultTableModel)jTable1.getModel()).setNumRows(0);
    }//GEN-LAST:event_btnLimpaComplexActionPerformed

    private void btnLimparSimpleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLimparSimpleActionPerformed
        txpInformacoesGeradasSimple.setText("");
        ((DefaultTableModel)jTable2.getModel()).setNumRows(0);
    }//GEN-LAST:event_btnLimparSimpleActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Index.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Index.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Index.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Index.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Index().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAdicionar;
    private javax.swing.JButton btnAdicionarSimple;
    private javax.swing.JButton btnCalcularSimple;
    private javax.swing.ButtonGroup btnGrupoTipo;
    private javax.swing.JButton btnLimpaComplex;
    private javax.swing.JButton btnLimparSimple;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JTable jTable1;
    private javax.swing.JTable jTable2;
    private javax.swing.JPanel pnlComplex;
    private javax.swing.JPanel pnlPai;
    private javax.swing.JPanel pnlSimple;
    private javax.swing.JRadioButton rdbComIntervalo;
    private javax.swing.JRadioButton rdbSemIntervalo;
    private javax.swing.JTextPane txpInformacoesGeradas;
    private javax.swing.JTextPane txpInformacoesGeradasSimple;
    private javax.swing.JTextField txtFrequenciaComplex;
    private javax.swing.JTextField txtFrequenciaSimple;
    private javax.swing.JTextField txtLimiteInferior;
    private javax.swing.JTextField txtLimiteSuperior;
    private javax.swing.JTextField txtValorSimple;
    // End of variables declaration//GEN-END:variables
    
    /**
     * 
     * @param elementos
     * @return Média simples de um conjunto de elementos
     */
    public double media(double[] elementos)
    {
        
        double soma = soma(elementos, elementos.length - 1, 0);
        
        return soma / elementos.length;
    }
    
    /**
     * 
     * @param elementos
     * @param frequencia
     * @return Média simples de um conjunto de elementos com x frequência
     */
    public double media(double[] elementos, double[] frequencia)
    {
        double soma = 0;
        for (int i = 0; i < elementos.length; i++) {
            soma += (elementos[i] * frequencia[i]);
        }
        return soma/soma(frequencia, frequencia.length - 1, 0);
    }
    
    /**
     * 
     * @param elementos
     * @param frequencia
     * @return média de x intervalos de classe de um conjunto de dados
     */
    public double media(double[][] elementos, double[] frequencia)
    {
        double soma = 0, somaParcial = 0;
        
        for (int i = 0; i < elementos.length; i++) {
            somaParcial = (soma(elementos[i], elementos[i].length - 1, 0)/2) * frequencia[i];
            soma += somaParcial;
        }
        
        double media = soma / soma(frequencia, frequencia.length - 1, 0);
        
        return media;
    }    
    
    /**
     * 
     * @param elementos
     * @return A mediana simples de elementos sem intervalo de classe
     */
    public double mediana(double[] elementos)
    {
        return (elementos.length % 2 == 0) ? ((elementos[(elementos.length / 2) - 1] + elementos[(elementos.length/2)])/2) : elementos[elementos.length / 2];
    }
    
    /**
     * 
     * @param elementos
     * @param frequencia
     * @return a moda de um conjunto de elementos
     */
    public double moda(double[] elementos, double[] frequencia)
    {
        double max = 0;
        int place = 0;
        for (int i = 0; i < frequencia.length; i++) 
        {
            if(frequencia[i] > max)
            {
                max = frequencia[i];
                place = i;
            }
        }
        return elementos[place];
    }
    
    /**
     * 
     * @param elementos
     * @param frequencia
     * @return 
     */
    public double moda(double[][] elementos, double[] frequencia)
    {
        int i = findClass(frequencia, 0.5);
        double moda = elementos[i][0];
        System.out.println(frequencia.length);
        if( i > 1 )
        {
            moda += ((frequencia[i] - frequencia[i - 1]) / ((frequencia[i] - frequencia[i - 1]) + (frequencia[i] - frequencia[i + 1]))) * (elementos[i][1] - elementos[i][0]);
        }else{
            moda += (frequencia[i] / ((frequencia[i]) + (frequencia[i]))) * (elementos[i][1] - elementos[i][0]);
        }
        
        return moda;
    }
    
    /**
     * 
     * @param elementos
     * @param frequencia
     * @param valorQuartil
     * @return 
     */
    public double quartil(double[][] elementos, double[] frequencia, int valorQuartil)
    {
        double pct;
        switch(valorQuartil)
        {
            case 1:
                pct = 0.25;
                break;
            case 2:
                pct = 0.5;
                break;
            case 3:
                pct =  0.75;
                break;
            default:
                pct = 1;
                break;
        }
        
        int i = findClass(frequencia, pct);
        double quartil = elementos[i][0];
        
        if ( i > 0 ){
            quartil += ((((pct * soma(frequencia, frequencia.length - 1)) - soma(frequencia, (i - 1), 0)) * (elementos[i][1] - elementos[i][0])) / frequencia[i]);
        }else{
            quartil += ((((pct * soma(frequencia, frequencia.length - 1)) - 0) * (elementos[i][1] - elementos[i][0])) / frequencia[i]);
        }
       
        return quartil;
    }
    
    public double decil(double[][] elementos, double[] frequencia, int valorDecil)
    {
        double pct;
        switch(valorDecil)
        {
            case 1:
                pct = 0.1;
                break;
            case 2:
                pct = 0.2;
                break;
            case 3:
                pct =  0.3;
                break;
            case 4:
                pct =  0.4;
                break;
            case 5:
                pct =  0.5;
                break;
            case 6:
                pct =  0.6;
                break;
            case 7:
                pct =  0.7;
                break;
            case 8:
                pct =  0.8;
                break;
            case 9:
                pct =  0.9;
                break;
            default:
                pct = 1;
                break;
        }
        
        int i = findClass(frequencia, pct);
        
        double decil = elementos[i][0];
        
        if ( i > 0 )
        {
            decil += ((((pct * soma(frequencia, frequencia.length - 1)) - soma(frequencia, (i - 1), 0)) * (elementos[i][1] - elementos[i][0])) / frequencia[i]);
        }else{
            decil += ((((pct * soma(frequencia, frequencia.length - 1)) - 0) * (elementos[i][1] - elementos[i][0])) / frequencia[i]);
        }
       
        return decil;
    }
    
    /**
     * 
     * @param elementos
     * @param frequencia
     * @param valorPercentil
     * @return 
     */
    public double percentil(double[][] elementos, double[] frequencia, double valorPercentil)
    {
        int i = findClass(frequencia, valorPercentil);
        double percentil = elementos[i][0];
        if( i > 0 )
        {
            percentil += ((((valorPercentil * soma(frequencia, frequencia.length - 1)) - soma(frequencia, (i - 1), 0)) * (elementos[i][1] - elementos[i][0])) / frequencia[i]);
        }else{
            percentil += ((((valorPercentil * soma(frequencia, frequencia.length - 1)) - 0 ) * (elementos[i][1] - elementos[i][0])) / frequencia[i]);
        }
        return percentil;
    }
    
    public double desvioMedio(double[][] elementos, double[] frequencia)
    {
        // DV = Somatória de ((Xi - x) * frequencia_da_classe) / soma_de_frequencia
        double dm = 0;
        double aux;
        
        for(int i = 0; i < frequencia.length; i++)
        {
            //dm += ((soma(elementos[i], elementos[i].length - 1) / 2) - media(elementos[i], frequencia)) * frequencia[i];
            aux = ((soma(elementos[i], elementos[i].length - 1) / 2) - media(elementos, frequencia));
            
            if(aux < 0)
            {
                dm += (aux * ((-1) * frequencia[i]));
            }else{
                dm += (aux * frequencia[i]);
            }
        }
        
        dm /= soma(frequencia, frequencia.length - 1);
        return dm;
    }
    
    public double desvioPadrao(double[][] elementos, double[] frequencia)
    {
        double dp = 0;
        for(int i = 0; i < frequencia.length; i++)
        {
            dp += Math.pow( ( (soma(elementos[i], elementos[i].length - 1) / 2 ) - media(elementos, frequencia)),2) * frequencia[i];
        }
        
        dp /= soma(frequencia, frequencia.length - 1);
        dp = Math.sqrt(dp);
        return dp;
    }
    
    public double coeficienteVariacao(double desvioPadrao, double media)
    {
        return desvioPadrao / media;
    }
    
    /**
     * 
     * @param f
     * @param controle
     * @return soma recursiva do vetor f que soma todo o vetor 
     */
    public double soma(double[] f, int controle)
    {
        if(controle == 0) return f[0];
        
        return f[controle] + soma(f, controle - 1);
    }
    
    /**
     * 
     * @param frequencia
     * @param type
     * @return 
     */
    public int findClass(double frequencia[], double type)
    {
        int i = 0;
        boolean flag = false;
        
        while ( i < frequencia.length && flag == false ) {
            if ( ( soma( frequencia, frequencia.length - 1 ) * type ) <= ( soma( frequencia, i, 0 ) ) ) {
                flag = true;
                
            } else {
                i++;
            }
        }
        
        System.out.println(i);
        return i;
    }
    
    /**
     * 
     * @param f
     * @param controle => Elemento limite de comparação => escape da recursividade
     * @param passagem => Elemento x do vetor que é incrementado
     * @return Uma soma qualquer com limite
     */
    public double soma(double[] f, int controle, int passagem)
    {
        
        if (passagem == controle) return f[passagem];
        
        return soma(f, controle, passagem + 1) + f[passagem];
    }
    
    public double[][] retornaArrayDoubleArrumado(String[] elementos)
    {
        String[] split;
        double[][] elementosSeparados = new double[elementos.length][2];
        for (int i = 0; i < elementos.length; i++)
        {
            elementos[i] = elementos[i].replace("[", "");
            split = elementos[i].split(";");
            elementosSeparados[i][0] = Double.valueOf(split[0]);
            elementosSeparados[i][1] = Double.valueOf(split[1]);
        }
        
        return elementosSeparados;
    }
    
    /**
     *
     * @param elemento
     * @return
     */
    public double[] retornaVetorDoubleArrumado(String[] elemento)
    {
        double[] elementos = new double[elemento.length];
        
        for(int i = 0; i < elementos.length; i++)
        {
            elementos[i] = Double.parseDouble(elemento[i]);
        }
        
        return elementos;
    }

    /**
     * 
     * @return Cria um conjunto de dados de amostra 
     */
    private PieDataset createDataset(String[][] conteudo, double[] frequencia, double frequenciaTotal) {
	DefaultPieDataset result = new DefaultPieDataset();
        Double valor = 0d;
        for (Double pepeka : frequencia) {
            
        }
        for ( int i = 0; i < frequencia.length; i++ ) {
            valor = ( frequencia[i] / frequenciaTotal ) * 100;
            
            result.setValue(conteudo[i][0], valor );
        }
        
	return result;
    }
    
    private JFreeChart createChart(PieDataset dataset, String title) {
        // título // dados  // include legenda
        JFreeChart chart = ChartFactory.createPieChart3D(title, dataset, true, true, true);
        
        return chart;
    }
}
